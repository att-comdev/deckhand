# Tests success paths for secret substitution:
#
# 1. Tests that creating a secret passphrase alongside other documents
#    results in the Barbican secret ref being returned.
# 2. Tests that the secret payload is included in the destination
#    and source documents after document rendering.

defaults:
  request_headers:
    content-type: application/x-yaml
    X-Auth-Token: $ENVIRON['TEST_AUTH_TOKEN']
  response_headers:
    content-type: application/x-yaml
  verbose: true

tests:
  - name: purge
    desc: Begin testing from known state.
    DELETE: /api/v1.0/revisions
    status: 204
    response_headers: null

    # Validates the following branches:
    # schema = schema.split('/')[1].lower().strip()
    # if schema == 'certificatekey':
    #     return 'private'
    # elif schema == 'certificateauthority':
    #     return 'certificate'
    # elif schema == 'certificateauthoritykey':
    #     return 'private'
    # elif schema == 'publickey':
    #     return 'public'
    # return schema
  - name: create_documents_for_secret_substitution
    desc: Create documents with substitution source with storagePolicy=encrypted
    PUT: /api/v1.0/buckets/secret/documents
    status: 200
    data: |-
      ---
      schema: deckhand/LayeringPolicy/v1
      metadata:
        schema: metadata/Control/v1
        name: layering-policy
      data:
        layerOrder:
          - site
      ---
      schema: deckhand/Certificate/v1
      metadata:
        name: example-cert
        schema: metadata/Document/v1
        layeringDefinition:
          layer: site
        storagePolicy: encrypted
      data: CERTIFICATE DATA
      ---
      schema: deckhand/CertificateAuthority/v1
      metadata:
        name: example-ca
        schema: metadata/Document/v1
        layeringDefinition:
          layer: site
        storagePolicy: encrypted
      data: CA DATA
      ---
      schema: deckhand/CertificateAuthorityKey/v1
      metadata:
        name: example-ca-key
        schema: metadata/Document/v1
        layeringDefinition:
          layer: site
        storagePolicy: encrypted
      data: CA KEY DATA
      ---
      schema: deckhand/CertificateKey/v1
      metadata:
        name: example-cert-key
        schema: metadata/Document/v1
        layeringDefinition:
          layer: site
        storagePolicy: encrypted
      data: CERTIFICATE KEY DATA
      ---
      schema: deckhand/PrivateKey/v1
      metadata:
        name: example-private-key
        schema: metadata/Document/v1
        layeringDefinition:
          layer: site
        storagePolicy: encrypted
      data: PRIVATE KEY DATA
      ---
      schema: deckhand/PublicKey/v1
      metadata:
        name: example-public-key
        schema: metadata/Document/v1
        layeringDefinition:
          layer: site
        storagePolicy: encrypted
      data: PUBLIC KEY DATA
      ---
      schema: armada/Chart/v1
      metadata:
        schema: metadata/Document/v1
        name: armada-chart-01
        layeringDefinition:
          layer: site
        substitutions:
          - dest:
              path: .certificate
            src:
              schema: deckhand/Certificate/v1
              name: example-cert
              path: .
          - dest:
              path: .certificate_authority
            src:
              schema: deckhand/CertificateAuthority/v1
              name: example-ca
              path: .
          - dest:
              path: .certificate_authority_key
            src:
              schema: deckhand/CertificateAuthorityKey/v1
              name: example-ca-key
              path: .
          - dest:
              path: .certificate_key
            src:
              schema: deckhand/CertificateKey/v1
              name: example-cert-key
              path: .
          - dest:
              path: .private_key
            src:
              schema: deckhand/PrivateKey/v1
              name: example-private-key
              path: .
          - dest:
              path: .public_key
            src:
              schema: deckhand/PublicKey/v1
              name: example-public-key
              path: .
      data: {}
      ...

  - name: verify_multiple_revision_documents_returns_secret_ref
    desc: Verify that secret ref was created for example-cert among multiple created documents.
    GET: /api/v1.0/revisions/$RESPONSE['$.[0].status.revision']/documents
    status: 200
    query_parameters:
      metadata.name:
        - example-ca
        - example-ca-key
        - example-cert
        - example-cert-key
        - example-private-key
        - example-public-key
    response_multidoc_jsonpaths:
      $.`len`: 6
      # NOTE(fmontei): jsonpath-rw-ext uses a 1 character separator (rather than allowing a string)
      # leading to this nastiness:
      $.[*].data.`split(:, 0, 1)` + "://" + $.[*].data.`split(/, 2, 3)` + "/v1": $ENVIRON['TEST_BARBICAN_URL']

  - name: verify_secret_payload_in_destination_document
    desc: Verify secret payload is injected in destination document as well as example-cert.
    GET: /api/v1.0/revisions/$RESPONSE['$.[0].status.revision']/rendered-documents
    status: 200
    query_parameters:
      sort: 'metadata.name'
    response_multidoc_jsonpaths:
      $.`len`: 8
      $.[0].metadata.name: armada-chart-01
      $.[0].data:
        certificate: CERTIFICATE DATA
        certificate_authority: CA DATA
        certificate_authority_key: CA KEY DATA
        certificate_key: CERTIFICATE KEY DATA
        private_key: PRIVATE KEY DATA
        public_key: PUBLIC KEY DATA
      $.[1].metadata.name: example-ca
      $.[1].data: CA DATA
      $.[2].metadata.name: example-ca-key
      $.[2].data: CA KEY DATA
      $.[3].metadata.name: example-cert
      $.[3].data: CERTIFICATE DATA
      $.[4].metadata.name: example-cert-key
      $.[4].data: CERTIFICATE KEY DATA
      $.[6].metadata.name: example-private-key
      $.[6].data: PRIVATE KEY DATA
      $.[6].metadata.name: example-public-key
      $.[6].data: PUBLIC KEY DATA
