{
  "comments": [
    {
      "key": {
        "uuid": "1eaa210d_21307e5b",
        "filename": "deckhand/control/views/revision.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1011940
      },
      "writtenOn": "2017-08-09T15:11:49Z",
      "side": 1,
      "message": "I don\u0027t understand this comment. I think there\u0027s context because of the folder this is in that maybe I\u0027m missing?  Is this ViewBuilder only for validation policies? Why wouldn\u0027t the class be named something to that effect, or the package be named accordingly?",
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a604ce96_6918db60",
        "filename": "deckhand/control/views/revision.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-08-09T15:19:35Z",
      "side": 1,
      "message": "Corresponds to this: https://github.com/att-comdev/deckhand/blob/master/docs/design.md#get-revisionsrevision_id\n\n\"The status of each ValidationPolicy belonging to the revision is also included.\"\n\nThe design document says nothing about other types of documents being returned.\n\nBesides that, I stopped adding view logic for every endpoint because this patch is already too big. There are multiple things I need to follow up with like a /DELETE endpoint for documents, views for documents, more functional tests, more unit tests, and it just goes on.",
      "parentUuid": "1eaa210d_21307e5b",
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8973dab_e3cb8932",
        "filename": "deckhand/db/sqlalchemy/api.py",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1011940
      },
      "writtenOn": "2017-08-09T15:11:49Z",
      "side": 1,
      "message": "Do you have a plan for getting more logging done in these methods? I don\u0027t see much in the way of debug logging that would give me a clue as to what happened.  I\u0027ll not repeat this comment in other places, but it does apply elsewhere.",
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9cdd592_9921f4d1",
        "filename": "deckhand/db/sqlalchemy/api.py",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2017-08-09T15:19:35Z",
      "side": 1,
      "message": "It\u0027d have to be done in a follow up patch. Actually, right now all the oslo_db junk is getting logged to the database and I\u0027ve been trying to figure out how to turn all of it off because it\u0027s a distraction.\n\nI do agree though that adding LOG statements with nice messages is nice to have.",
      "parentUuid": "f8973dab_e3cb8932",
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b4589cf_6e612f56",
        "filename": "deckhand/db/sqlalchemy/models.py",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1011672
      },
      "writtenOn": "2017-08-10T19:56:47Z",
      "side": 1,
      "message": "This table arg surprises me.  I thought the only valid kinds of \"mysql_engine\" values were store engine options for mysql\u0027s create table: https://dev.mysql.com/doc/refman/5.7/en/storage-engines.html  (+ innodb).\n\nIs this doing something different because of oslo.db?",
      "range": {
        "startLine": 42,
        "startChar": 22,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "338be237_52ac8de8",
        "filename": "deckhand/db/sqlalchemy/models.py",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1011672
      },
      "writtenOn": "2017-08-10T19:56:47Z",
      "side": 1,
      "message": "I was imagining we would take advantage of Postgres\u0027s native jsonb type for storing these.\n\nThat will let us build indexes directly into the metadata.  It\u0027s of course not required, but it\u0027s available to us.",
      "range": {
        "startLine": 131,
        "startChar": 4,
        "endLine": 132,
        "endChar": 63
      },
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a058ecd_b648471e",
        "filename": "deckhand/engine/schema/base_schema.py",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1011672
      },
      "writtenOn": "2017-08-10T19:56:47Z",
      "side": 1,
      "message": "It might be the case that we don\u0027t care what\u0027s here (so long as it\u0027s valid json).",
      "range": {
        "startLine": 32,
        "startChar": 25,
        "endLine": 32,
        "endChar": 45
      },
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0768544_7a28d12d",
        "filename": "deckhand/engine/schema/v1_0/certificate_key_schema.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1011672
      },
      "writtenOn": "2017-08-10T19:56:47Z",
      "side": 1,
      "message": "Not sure if you\u0027re already planning this, but I would consider a single schema for metadata.schema \u003d metadata/Document/v1 (and of course for m/Control/v1).\n\nThen you can apply that schema to just the data under the metadata key and reuse it for all documents with that metadata schema.\n\nLikewise with other document types, you could just apply them to everything under the data key.",
      "revId": "e1446bb9e128a32547e61f4c977b539af7e125ed",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}