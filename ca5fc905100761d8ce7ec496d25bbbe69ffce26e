{
  "comments": [
    {
      "key": {
        "uuid": "14ca99cb_db1cb682",
        "filename": "deckhand/barbican/client_wrapper.py",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2018-04-25T07:20:24Z",
      "side": 1,
      "message": "This is pretty close but should be this instead (I believe):\n\n            cli \u003d barbican.client.Client(\n                endpoint\u003dbarbican_url,\n                project_id\u003dCONF.keystone_authtoken.admin_tenant_name)\n\nbarbican_url itself must be the root URL without /v1 at the end for it to work.\n\nFrom the CLI the following works:\n\nbarbican --no-auth --endpoint http://barbican-api.openstack.svc.cluster.local:9311 --os-project-id admin secret list\n\nIn order for this to work the barbican_api paste pipeline will have to be used instead of the barbican-api-keystone one.",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 56,
        "endChar": 65
      },
      "revId": "ca5fc905100761d8ce7ec496d25bbbe69ffce26e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c698c7df_c01d6f2f",
        "filename": "deckhand/barbican/client_wrapper.py",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1013942
      },
      "writtenOn": "2018-04-25T07:29:33Z",
      "side": 1,
      "message": "cli \u003d barbican.client.Client(\n                endpoint\u003dbarbican_url,\n                project_id\u003dCONF.keystone_authtoken.admin_tenant_name) regarding this I can say while creating barbican client noauth the kwarg project_id can be anything that can\u0027t even be a valid keystone configuration I have checked the only thing that matters is the key should be present when using noauth.",
      "parentUuid": "14ca99cb_db1cb682",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 56,
        "endChar": 65
      },
      "revId": "ca5fc905100761d8ce7ec496d25bbbe69ffce26e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4b52145_4e4434e3",
        "filename": "deckhand/barbican/client_wrapper.py",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2018-04-25T07:20:24Z",
      "side": 1,
      "message": "I\u0027ll have to check later but I don\u0027t actually think this is needed by reading the CLI Client constructor code.",
      "range": {
        "startLine": 61,
        "startChar": 46,
        "endLine": 61,
        "endChar": 67
      },
      "revId": "ca5fc905100761d8ce7ec496d25bbbe69ffce26e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a147fc37_2dcad383",
        "filename": "deckhand/conf/config.py",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1011942
      },
      "writtenOn": "2018-04-23T19:11:25Z",
      "side": 1,
      "message": "I think that if we want to introduce a way of toggling development mode it should be done consistently across both patch sets. Instead of passing in `--development-mode` to entrypoint.sh we could just introduce this option and use it in both patch sets. But maybe we can make the change in both places in this patch set instead.",
      "range": {
        "startLine": 55,
        "startChar": 17,
        "endLine": 55,
        "endChar": 33
      },
      "revId": "ca5fc905100761d8ce7ec496d25bbbe69ffce26e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36aafd8a_621dddde",
        "filename": "deckhand/conf/config.py",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1013942
      },
      "writtenOn": "2018-04-23T19:37:37Z",
      "side": 1,
      "message": "I also have thought about that but if you see deckhand/control/api.py Line no 58 there CONF options are loaded from the deckhand.conf and deckhand-paste.ini but the deckhand-paste.ini will be subjective to mode(i.e development or production) before even the CONF options are available.",
      "parentUuid": "a147fc37_2dcad383",
      "range": {
        "startLine": 55,
        "startChar": 17,
        "endLine": 55,
        "endChar": 33
      },
      "revId": "ca5fc905100761d8ce7ec496d25bbbe69ffce26e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}